# coding: utf-8

"""
    Curaegis Egress API

    Curaegis egress data API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ErrorModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'instance_id': 'str',
        'user_id': 'str',
        'error': 'InlineResponseDefaultError',
        'orig_obj': 'str'
    }

    attribute_map = {
        'id': 'id',
        'instance_id': 'instance_id',
        'user_id': 'user_id',
        'error': 'Error',
        'orig_obj': '_orig_obj'
    }

    def __init__(self, id=None, instance_id=None, user_id=None, error=None, orig_obj=None):  # noqa: E501
        """ErrorModel - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._instance_id = None
        self._user_id = None
        self._error = None
        self._orig_obj = None
        self.discriminator = None

        self.id = id
        self.instance_id = instance_id
        self.user_id = user_id
        if error is not None:
            self.error = error
        self.orig_obj = orig_obj

    @property
    def id(self):
        """Gets the id of this ErrorModel.  # noqa: E501


        :return: The id of this ErrorModel.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ErrorModel.


        :param id: The id of this ErrorModel.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def instance_id(self):
        """Gets the instance_id of this ErrorModel.  # noqa: E501


        :return: The instance_id of this ErrorModel.  # noqa: E501
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this ErrorModel.


        :param instance_id: The instance_id of this ErrorModel.  # noqa: E501
        :type: str
        """
        if instance_id is None:
            raise ValueError("Invalid value for `instance_id`, must not be `None`")  # noqa: E501

        self._instance_id = instance_id

    @property
    def user_id(self):
        """Gets the user_id of this ErrorModel.  # noqa: E501


        :return: The user_id of this ErrorModel.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ErrorModel.


        :param user_id: The user_id of this ErrorModel.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def error(self):
        """Gets the error of this ErrorModel.  # noqa: E501


        :return: The error of this ErrorModel.  # noqa: E501
        :rtype: InlineResponseDefaultError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ErrorModel.


        :param error: The error of this ErrorModel.  # noqa: E501
        :type: InlineResponseDefaultError
        """

        self._error = error

    @property
    def orig_obj(self):
        """Gets the orig_obj of this ErrorModel.  # noqa: E501


        :return: The orig_obj of this ErrorModel.  # noqa: E501
        :rtype: str
        """
        return self._orig_obj

    @orig_obj.setter
    def orig_obj(self, orig_obj):
        """Sets the orig_obj of this ErrorModel.


        :param orig_obj: The orig_obj of this ErrorModel.  # noqa: E501
        :type: str
        """
        if orig_obj is None:
            raise ValueError("Invalid value for `orig_obj`, must not be `None`")  # noqa: E501

        self._orig_obj = orig_obj

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ErrorModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ErrorModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
