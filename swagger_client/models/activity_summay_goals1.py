# coding: utf-8

"""
    Curaegis Egress API

    Curaegis egress data API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ActivitySummayGoals1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_minutes': 'int',
        'calories_out': 'int',
        'distance': 'int',
        'floors': 'int',
        'steps': 'int'
    }

    attribute_map = {
        'active_minutes': 'activeMinutes',
        'calories_out': 'caloriesOut',
        'distance': 'distance',
        'floors': 'floors',
        'steps': 'steps'
    }

    def __init__(self, active_minutes=None, calories_out=None, distance=None, floors=None, steps=None):  # noqa: E501
        """ActivitySummayGoals1 - a model defined in Swagger"""  # noqa: E501

        self._active_minutes = None
        self._calories_out = None
        self._distance = None
        self._floors = None
        self._steps = None
        self.discriminator = None

        self.active_minutes = active_minutes
        self.calories_out = calories_out
        self.distance = distance
        self.floors = floors
        self.steps = steps

    @property
    def active_minutes(self):
        """Gets the active_minutes of this ActivitySummayGoals1.  # noqa: E501


        :return: The active_minutes of this ActivitySummayGoals1.  # noqa: E501
        :rtype: int
        """
        return self._active_minutes

    @active_minutes.setter
    def active_minutes(self, active_minutes):
        """Sets the active_minutes of this ActivitySummayGoals1.


        :param active_minutes: The active_minutes of this ActivitySummayGoals1.  # noqa: E501
        :type: int
        """
        if active_minutes is None:
            raise ValueError("Invalid value for `active_minutes`, must not be `None`")  # noqa: E501

        self._active_minutes = active_minutes

    @property
    def calories_out(self):
        """Gets the calories_out of this ActivitySummayGoals1.  # noqa: E501


        :return: The calories_out of this ActivitySummayGoals1.  # noqa: E501
        :rtype: int
        """
        return self._calories_out

    @calories_out.setter
    def calories_out(self, calories_out):
        """Sets the calories_out of this ActivitySummayGoals1.


        :param calories_out: The calories_out of this ActivitySummayGoals1.  # noqa: E501
        :type: int
        """
        if calories_out is None:
            raise ValueError("Invalid value for `calories_out`, must not be `None`")  # noqa: E501

        self._calories_out = calories_out

    @property
    def distance(self):
        """Gets the distance of this ActivitySummayGoals1.  # noqa: E501


        :return: The distance of this ActivitySummayGoals1.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this ActivitySummayGoals1.


        :param distance: The distance of this ActivitySummayGoals1.  # noqa: E501
        :type: int
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance

    @property
    def floors(self):
        """Gets the floors of this ActivitySummayGoals1.  # noqa: E501


        :return: The floors of this ActivitySummayGoals1.  # noqa: E501
        :rtype: int
        """
        return self._floors

    @floors.setter
    def floors(self, floors):
        """Sets the floors of this ActivitySummayGoals1.


        :param floors: The floors of this ActivitySummayGoals1.  # noqa: E501
        :type: int
        """
        if floors is None:
            raise ValueError("Invalid value for `floors`, must not be `None`")  # noqa: E501

        self._floors = floors

    @property
    def steps(self):
        """Gets the steps of this ActivitySummayGoals1.  # noqa: E501


        :return: The steps of this ActivitySummayGoals1.  # noqa: E501
        :rtype: int
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this ActivitySummayGoals1.


        :param steps: The steps of this ActivitySummayGoals1.  # noqa: E501
        :type: int
        """
        if steps is None:
            raise ValueError("Invalid value for `steps`, must not be `None`")  # noqa: E501

        self._steps = steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivitySummayGoals1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivitySummayGoals1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
