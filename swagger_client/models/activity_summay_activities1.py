# coding: utf-8

"""
    Curaegis Egress API

    Curaegis egress data API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ActivitySummayActivities1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activity_id': 'int',
        'activity_parent_id': 'int',
        'calories': 'int',
        'description': 'str',
        'distance': 'int',
        'duration': 'int',
        'has_start_time': 'bool',
        'is_favorite': 'bool',
        'log_id': 'int',
        'name': 'str',
        'start_time': 'str',
        'steps': 'int'
    }

    attribute_map = {
        'activity_id': 'activityId',
        'activity_parent_id': 'activityParentId',
        'calories': 'calories',
        'description': 'description',
        'distance': 'distance',
        'duration': 'duration',
        'has_start_time': 'hasStartTime',
        'is_favorite': 'isFavorite',
        'log_id': 'logId',
        'name': 'name',
        'start_time': 'startTime',
        'steps': 'steps'
    }

    def __init__(self, activity_id=None, activity_parent_id=None, calories=None, description=None, distance=None, duration=None, has_start_time=None, is_favorite=None, log_id=None, name=None, start_time=None, steps=None):  # noqa: E501
        """ActivitySummayActivities1 - a model defined in Swagger"""  # noqa: E501

        self._activity_id = None
        self._activity_parent_id = None
        self._calories = None
        self._description = None
        self._distance = None
        self._duration = None
        self._has_start_time = None
        self._is_favorite = None
        self._log_id = None
        self._name = None
        self._start_time = None
        self._steps = None
        self.discriminator = None

        self.activity_id = activity_id
        self.activity_parent_id = activity_parent_id
        self.calories = calories
        self.description = description
        self.distance = distance
        self.duration = duration
        self.has_start_time = has_start_time
        self.is_favorite = is_favorite
        self.log_id = log_id
        self.name = name
        self.start_time = start_time
        self.steps = steps

    @property
    def activity_id(self):
        """Gets the activity_id of this ActivitySummayActivities1.  # noqa: E501


        :return: The activity_id of this ActivitySummayActivities1.  # noqa: E501
        :rtype: int
        """
        return self._activity_id

    @activity_id.setter
    def activity_id(self, activity_id):
        """Sets the activity_id of this ActivitySummayActivities1.


        :param activity_id: The activity_id of this ActivitySummayActivities1.  # noqa: E501
        :type: int
        """
        if activity_id is None:
            raise ValueError("Invalid value for `activity_id`, must not be `None`")  # noqa: E501

        self._activity_id = activity_id

    @property
    def activity_parent_id(self):
        """Gets the activity_parent_id of this ActivitySummayActivities1.  # noqa: E501


        :return: The activity_parent_id of this ActivitySummayActivities1.  # noqa: E501
        :rtype: int
        """
        return self._activity_parent_id

    @activity_parent_id.setter
    def activity_parent_id(self, activity_parent_id):
        """Sets the activity_parent_id of this ActivitySummayActivities1.


        :param activity_parent_id: The activity_parent_id of this ActivitySummayActivities1.  # noqa: E501
        :type: int
        """
        if activity_parent_id is None:
            raise ValueError("Invalid value for `activity_parent_id`, must not be `None`")  # noqa: E501

        self._activity_parent_id = activity_parent_id

    @property
    def calories(self):
        """Gets the calories of this ActivitySummayActivities1.  # noqa: E501


        :return: The calories of this ActivitySummayActivities1.  # noqa: E501
        :rtype: int
        """
        return self._calories

    @calories.setter
    def calories(self, calories):
        """Sets the calories of this ActivitySummayActivities1.


        :param calories: The calories of this ActivitySummayActivities1.  # noqa: E501
        :type: int
        """
        if calories is None:
            raise ValueError("Invalid value for `calories`, must not be `None`")  # noqa: E501

        self._calories = calories

    @property
    def description(self):
        """Gets the description of this ActivitySummayActivities1.  # noqa: E501


        :return: The description of this ActivitySummayActivities1.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ActivitySummayActivities1.


        :param description: The description of this ActivitySummayActivities1.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def distance(self):
        """Gets the distance of this ActivitySummayActivities1.  # noqa: E501


        :return: The distance of this ActivitySummayActivities1.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this ActivitySummayActivities1.


        :param distance: The distance of this ActivitySummayActivities1.  # noqa: E501
        :type: int
        """
        if distance is None:
            raise ValueError("Invalid value for `distance`, must not be `None`")  # noqa: E501

        self._distance = distance

    @property
    def duration(self):
        """Gets the duration of this ActivitySummayActivities1.  # noqa: E501


        :return: The duration of this ActivitySummayActivities1.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ActivitySummayActivities1.


        :param duration: The duration of this ActivitySummayActivities1.  # noqa: E501
        :type: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def has_start_time(self):
        """Gets the has_start_time of this ActivitySummayActivities1.  # noqa: E501


        :return: The has_start_time of this ActivitySummayActivities1.  # noqa: E501
        :rtype: bool
        """
        return self._has_start_time

    @has_start_time.setter
    def has_start_time(self, has_start_time):
        """Sets the has_start_time of this ActivitySummayActivities1.


        :param has_start_time: The has_start_time of this ActivitySummayActivities1.  # noqa: E501
        :type: bool
        """
        if has_start_time is None:
            raise ValueError("Invalid value for `has_start_time`, must not be `None`")  # noqa: E501

        self._has_start_time = has_start_time

    @property
    def is_favorite(self):
        """Gets the is_favorite of this ActivitySummayActivities1.  # noqa: E501


        :return: The is_favorite of this ActivitySummayActivities1.  # noqa: E501
        :rtype: bool
        """
        return self._is_favorite

    @is_favorite.setter
    def is_favorite(self, is_favorite):
        """Sets the is_favorite of this ActivitySummayActivities1.


        :param is_favorite: The is_favorite of this ActivitySummayActivities1.  # noqa: E501
        :type: bool
        """
        if is_favorite is None:
            raise ValueError("Invalid value for `is_favorite`, must not be `None`")  # noqa: E501

        self._is_favorite = is_favorite

    @property
    def log_id(self):
        """Gets the log_id of this ActivitySummayActivities1.  # noqa: E501


        :return: The log_id of this ActivitySummayActivities1.  # noqa: E501
        :rtype: int
        """
        return self._log_id

    @log_id.setter
    def log_id(self, log_id):
        """Sets the log_id of this ActivitySummayActivities1.


        :param log_id: The log_id of this ActivitySummayActivities1.  # noqa: E501
        :type: int
        """
        if log_id is None:
            raise ValueError("Invalid value for `log_id`, must not be `None`")  # noqa: E501

        self._log_id = log_id

    @property
    def name(self):
        """Gets the name of this ActivitySummayActivities1.  # noqa: E501


        :return: The name of this ActivitySummayActivities1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ActivitySummayActivities1.


        :param name: The name of this ActivitySummayActivities1.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def start_time(self):
        """Gets the start_time of this ActivitySummayActivities1.  # noqa: E501


        :return: The start_time of this ActivitySummayActivities1.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ActivitySummayActivities1.


        :param start_time: The start_time of this ActivitySummayActivities1.  # noqa: E501
        :type: str
        """
        if start_time is None:
            raise ValueError("Invalid value for `start_time`, must not be `None`")  # noqa: E501

        self._start_time = start_time

    @property
    def steps(self):
        """Gets the steps of this ActivitySummayActivities1.  # noqa: E501


        :return: The steps of this ActivitySummayActivities1.  # noqa: E501
        :rtype: int
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this ActivitySummayActivities1.


        :param steps: The steps of this ActivitySummayActivities1.  # noqa: E501
        :type: int
        """
        if steps is None:
            raise ValueError("Invalid value for `steps`, must not be `None`")  # noqa: E501

        self._steps = steps

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivitySummayActivities1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivitySummayActivities1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
