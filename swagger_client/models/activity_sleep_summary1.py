# coding: utf-8

"""
    Curaegis Egress API

    Curaegis egress data API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ActivitySleepSummary1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_minutes_asleep': 'float',
        'total_sleep_records': 'float',
        'total_time_in_bed': 'float'
    }

    attribute_map = {
        'total_minutes_asleep': 'totalMinutesAsleep',
        'total_sleep_records': 'totalSleepRecords',
        'total_time_in_bed': 'totalTimeInBed'
    }

    def __init__(self, total_minutes_asleep=None, total_sleep_records=None, total_time_in_bed=None):  # noqa: E501
        """ActivitySleepSummary1 - a model defined in Swagger"""  # noqa: E501

        self._total_minutes_asleep = None
        self._total_sleep_records = None
        self._total_time_in_bed = None
        self.discriminator = None

        self.total_minutes_asleep = total_minutes_asleep
        self.total_sleep_records = total_sleep_records
        self.total_time_in_bed = total_time_in_bed

    @property
    def total_minutes_asleep(self):
        """Gets the total_minutes_asleep of this ActivitySleepSummary1.  # noqa: E501


        :return: The total_minutes_asleep of this ActivitySleepSummary1.  # noqa: E501
        :rtype: float
        """
        return self._total_minutes_asleep

    @total_minutes_asleep.setter
    def total_minutes_asleep(self, total_minutes_asleep):
        """Sets the total_minutes_asleep of this ActivitySleepSummary1.


        :param total_minutes_asleep: The total_minutes_asleep of this ActivitySleepSummary1.  # noqa: E501
        :type: float
        """
        if total_minutes_asleep is None:
            raise ValueError("Invalid value for `total_minutes_asleep`, must not be `None`")  # noqa: E501

        self._total_minutes_asleep = total_minutes_asleep

    @property
    def total_sleep_records(self):
        """Gets the total_sleep_records of this ActivitySleepSummary1.  # noqa: E501


        :return: The total_sleep_records of this ActivitySleepSummary1.  # noqa: E501
        :rtype: float
        """
        return self._total_sleep_records

    @total_sleep_records.setter
    def total_sleep_records(self, total_sleep_records):
        """Sets the total_sleep_records of this ActivitySleepSummary1.


        :param total_sleep_records: The total_sleep_records of this ActivitySleepSummary1.  # noqa: E501
        :type: float
        """
        if total_sleep_records is None:
            raise ValueError("Invalid value for `total_sleep_records`, must not be `None`")  # noqa: E501

        self._total_sleep_records = total_sleep_records

    @property
    def total_time_in_bed(self):
        """Gets the total_time_in_bed of this ActivitySleepSummary1.  # noqa: E501


        :return: The total_time_in_bed of this ActivitySleepSummary1.  # noqa: E501
        :rtype: float
        """
        return self._total_time_in_bed

    @total_time_in_bed.setter
    def total_time_in_bed(self, total_time_in_bed):
        """Sets the total_time_in_bed of this ActivitySleepSummary1.


        :param total_time_in_bed: The total_time_in_bed of this ActivitySleepSummary1.  # noqa: E501
        :type: float
        """
        if total_time_in_bed is None:
            raise ValueError("Invalid value for `total_time_in_bed`, must not be `None`")  # noqa: E501

        self._total_time_in_bed = total_time_in_bed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivitySleepSummary1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivitySleepSummary1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
