# coding: utf-8

"""
    Curaegis Egress API

    Curaegis egress data API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ActivitySummay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activities': 'list[ActivitySummayActivities1]',
        'goals': 'ActivitySummayGoals1',
        'summary': 'ActivitySummaySummary1',
        'user_id': 'str'
    }

    attribute_map = {
        'activities': 'activities',
        'goals': 'goals',
        'summary': 'summary',
        'user_id': 'user_id'
    }

    def __init__(self, activities=None, goals=None, summary=None, user_id=None):  # noqa: E501
        """ActivitySummay - a model defined in Swagger"""  # noqa: E501

        self._activities = None
        self._goals = None
        self._summary = None
        self._user_id = None
        self.discriminator = None

        self.activities = activities
        if goals is not None:
            self.goals = goals
        if summary is not None:
            self.summary = summary
        self.user_id = user_id

    @property
    def activities(self):
        """Gets the activities of this ActivitySummay.  # noqa: E501


        :return: The activities of this ActivitySummay.  # noqa: E501
        :rtype: list[ActivitySummayActivities1]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this ActivitySummay.


        :param activities: The activities of this ActivitySummay.  # noqa: E501
        :type: list[ActivitySummayActivities1]
        """
        if activities is None:
            raise ValueError("Invalid value for `activities`, must not be `None`")  # noqa: E501

        self._activities = activities

    @property
    def goals(self):
        """Gets the goals of this ActivitySummay.  # noqa: E501


        :return: The goals of this ActivitySummay.  # noqa: E501
        :rtype: ActivitySummayGoals1
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """Sets the goals of this ActivitySummay.


        :param goals: The goals of this ActivitySummay.  # noqa: E501
        :type: ActivitySummayGoals1
        """

        self._goals = goals

    @property
    def summary(self):
        """Gets the summary of this ActivitySummay.  # noqa: E501


        :return: The summary of this ActivitySummay.  # noqa: E501
        :rtype: ActivitySummaySummary1
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ActivitySummay.


        :param summary: The summary of this ActivitySummay.  # noqa: E501
        :type: ActivitySummaySummary1
        """

        self._summary = summary

    @property
    def user_id(self):
        """Gets the user_id of this ActivitySummay.  # noqa: E501


        :return: The user_id of this ActivitySummay.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ActivitySummay.


        :param user_id: The user_id of this ActivitySummay.  # noqa: E501
        :type: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivitySummay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivitySummay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
