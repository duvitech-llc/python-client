# coding: utf-8

"""
    Curaegis Egress API

    Curaegis egress data API  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ActivitySummaySummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_score': 'int',
        'activity_calories': 'int',
        'calories_bmr': 'int',
        'calories_out': 'int',
        'distances': 'list[ActivitySummaySummary1Distances]',
        'elevation': 'float',
        'fairly_active_minutes': 'int',
        'floors': 'int',
        'heart_rate_zones': 'list[ActivitySummaySummary1HeartRateZones]',
        'lightly_active_minutes': 'int',
        'marginal_calories': 'int',
        'resting_heart_rate': 'int',
        'sedentary_minutes': 'int',
        'steps': 'int',
        'very_active_minutes': 'int'
    }

    attribute_map = {
        'active_score': 'activeScore',
        'activity_calories': 'activityCalories',
        'calories_bmr': 'caloriesBMR',
        'calories_out': 'caloriesOut',
        'distances': 'distances',
        'elevation': 'elevation',
        'fairly_active_minutes': 'fairlyActiveMinutes',
        'floors': 'floors',
        'heart_rate_zones': 'heartRateZones',
        'lightly_active_minutes': 'lightlyActiveMinutes',
        'marginal_calories': 'marginalCalories',
        'resting_heart_rate': 'restingHeartRate',
        'sedentary_minutes': 'sedentaryMinutes',
        'steps': 'steps',
        'very_active_minutes': 'veryActiveMinutes'
    }

    def __init__(self, active_score=None, activity_calories=None, calories_bmr=None, calories_out=None, distances=None, elevation=None, fairly_active_minutes=None, floors=None, heart_rate_zones=None, lightly_active_minutes=None, marginal_calories=None, resting_heart_rate=None, sedentary_minutes=None, steps=None, very_active_minutes=None):  # noqa: E501
        """ActivitySummaySummary - a model defined in Swagger"""  # noqa: E501

        self._active_score = None
        self._activity_calories = None
        self._calories_bmr = None
        self._calories_out = None
        self._distances = None
        self._elevation = None
        self._fairly_active_minutes = None
        self._floors = None
        self._heart_rate_zones = None
        self._lightly_active_minutes = None
        self._marginal_calories = None
        self._resting_heart_rate = None
        self._sedentary_minutes = None
        self._steps = None
        self._very_active_minutes = None
        self.discriminator = None

        self.active_score = active_score
        self.activity_calories = activity_calories
        self.calories_bmr = calories_bmr
        self.calories_out = calories_out
        self.distances = distances
        self.elevation = elevation
        self.fairly_active_minutes = fairly_active_minutes
        self.floors = floors
        self.heart_rate_zones = heart_rate_zones
        self.lightly_active_minutes = lightly_active_minutes
        self.marginal_calories = marginal_calories
        self.resting_heart_rate = resting_heart_rate
        self.sedentary_minutes = sedentary_minutes
        self.steps = steps
        self.very_active_minutes = very_active_minutes

    @property
    def active_score(self):
        """Gets the active_score of this ActivitySummaySummary.  # noqa: E501


        :return: The active_score of this ActivitySummaySummary.  # noqa: E501
        :rtype: int
        """
        return self._active_score

    @active_score.setter
    def active_score(self, active_score):
        """Sets the active_score of this ActivitySummaySummary.


        :param active_score: The active_score of this ActivitySummaySummary.  # noqa: E501
        :type: int
        """
        if active_score is None:
            raise ValueError("Invalid value for `active_score`, must not be `None`")  # noqa: E501

        self._active_score = active_score

    @property
    def activity_calories(self):
        """Gets the activity_calories of this ActivitySummaySummary.  # noqa: E501


        :return: The activity_calories of this ActivitySummaySummary.  # noqa: E501
        :rtype: int
        """
        return self._activity_calories

    @activity_calories.setter
    def activity_calories(self, activity_calories):
        """Sets the activity_calories of this ActivitySummaySummary.


        :param activity_calories: The activity_calories of this ActivitySummaySummary.  # noqa: E501
        :type: int
        """
        if activity_calories is None:
            raise ValueError("Invalid value for `activity_calories`, must not be `None`")  # noqa: E501

        self._activity_calories = activity_calories

    @property
    def calories_bmr(self):
        """Gets the calories_bmr of this ActivitySummaySummary.  # noqa: E501


        :return: The calories_bmr of this ActivitySummaySummary.  # noqa: E501
        :rtype: int
        """
        return self._calories_bmr

    @calories_bmr.setter
    def calories_bmr(self, calories_bmr):
        """Sets the calories_bmr of this ActivitySummaySummary.


        :param calories_bmr: The calories_bmr of this ActivitySummaySummary.  # noqa: E501
        :type: int
        """
        if calories_bmr is None:
            raise ValueError("Invalid value for `calories_bmr`, must not be `None`")  # noqa: E501

        self._calories_bmr = calories_bmr

    @property
    def calories_out(self):
        """Gets the calories_out of this ActivitySummaySummary.  # noqa: E501


        :return: The calories_out of this ActivitySummaySummary.  # noqa: E501
        :rtype: int
        """
        return self._calories_out

    @calories_out.setter
    def calories_out(self, calories_out):
        """Sets the calories_out of this ActivitySummaySummary.


        :param calories_out: The calories_out of this ActivitySummaySummary.  # noqa: E501
        :type: int
        """
        if calories_out is None:
            raise ValueError("Invalid value for `calories_out`, must not be `None`")  # noqa: E501

        self._calories_out = calories_out

    @property
    def distances(self):
        """Gets the distances of this ActivitySummaySummary.  # noqa: E501


        :return: The distances of this ActivitySummaySummary.  # noqa: E501
        :rtype: list[ActivitySummaySummary1Distances]
        """
        return self._distances

    @distances.setter
    def distances(self, distances):
        """Sets the distances of this ActivitySummaySummary.


        :param distances: The distances of this ActivitySummaySummary.  # noqa: E501
        :type: list[ActivitySummaySummary1Distances]
        """
        if distances is None:
            raise ValueError("Invalid value for `distances`, must not be `None`")  # noqa: E501

        self._distances = distances

    @property
    def elevation(self):
        """Gets the elevation of this ActivitySummaySummary.  # noqa: E501


        :return: The elevation of this ActivitySummaySummary.  # noqa: E501
        :rtype: float
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this ActivitySummaySummary.


        :param elevation: The elevation of this ActivitySummaySummary.  # noqa: E501
        :type: float
        """
        if elevation is None:
            raise ValueError("Invalid value for `elevation`, must not be `None`")  # noqa: E501

        self._elevation = elevation

    @property
    def fairly_active_minutes(self):
        """Gets the fairly_active_minutes of this ActivitySummaySummary.  # noqa: E501


        :return: The fairly_active_minutes of this ActivitySummaySummary.  # noqa: E501
        :rtype: int
        """
        return self._fairly_active_minutes

    @fairly_active_minutes.setter
    def fairly_active_minutes(self, fairly_active_minutes):
        """Sets the fairly_active_minutes of this ActivitySummaySummary.


        :param fairly_active_minutes: The fairly_active_minutes of this ActivitySummaySummary.  # noqa: E501
        :type: int
        """
        if fairly_active_minutes is None:
            raise ValueError("Invalid value for `fairly_active_minutes`, must not be `None`")  # noqa: E501

        self._fairly_active_minutes = fairly_active_minutes

    @property
    def floors(self):
        """Gets the floors of this ActivitySummaySummary.  # noqa: E501


        :return: The floors of this ActivitySummaySummary.  # noqa: E501
        :rtype: int
        """
        return self._floors

    @floors.setter
    def floors(self, floors):
        """Sets the floors of this ActivitySummaySummary.


        :param floors: The floors of this ActivitySummaySummary.  # noqa: E501
        :type: int
        """
        if floors is None:
            raise ValueError("Invalid value for `floors`, must not be `None`")  # noqa: E501

        self._floors = floors

    @property
    def heart_rate_zones(self):
        """Gets the heart_rate_zones of this ActivitySummaySummary.  # noqa: E501


        :return: The heart_rate_zones of this ActivitySummaySummary.  # noqa: E501
        :rtype: list[ActivitySummaySummary1HeartRateZones]
        """
        return self._heart_rate_zones

    @heart_rate_zones.setter
    def heart_rate_zones(self, heart_rate_zones):
        """Sets the heart_rate_zones of this ActivitySummaySummary.


        :param heart_rate_zones: The heart_rate_zones of this ActivitySummaySummary.  # noqa: E501
        :type: list[ActivitySummaySummary1HeartRateZones]
        """
        if heart_rate_zones is None:
            raise ValueError("Invalid value for `heart_rate_zones`, must not be `None`")  # noqa: E501

        self._heart_rate_zones = heart_rate_zones

    @property
    def lightly_active_minutes(self):
        """Gets the lightly_active_minutes of this ActivitySummaySummary.  # noqa: E501


        :return: The lightly_active_minutes of this ActivitySummaySummary.  # noqa: E501
        :rtype: int
        """
        return self._lightly_active_minutes

    @lightly_active_minutes.setter
    def lightly_active_minutes(self, lightly_active_minutes):
        """Sets the lightly_active_minutes of this ActivitySummaySummary.


        :param lightly_active_minutes: The lightly_active_minutes of this ActivitySummaySummary.  # noqa: E501
        :type: int
        """
        if lightly_active_minutes is None:
            raise ValueError("Invalid value for `lightly_active_minutes`, must not be `None`")  # noqa: E501

        self._lightly_active_minutes = lightly_active_minutes

    @property
    def marginal_calories(self):
        """Gets the marginal_calories of this ActivitySummaySummary.  # noqa: E501


        :return: The marginal_calories of this ActivitySummaySummary.  # noqa: E501
        :rtype: int
        """
        return self._marginal_calories

    @marginal_calories.setter
    def marginal_calories(self, marginal_calories):
        """Sets the marginal_calories of this ActivitySummaySummary.


        :param marginal_calories: The marginal_calories of this ActivitySummaySummary.  # noqa: E501
        :type: int
        """
        if marginal_calories is None:
            raise ValueError("Invalid value for `marginal_calories`, must not be `None`")  # noqa: E501

        self._marginal_calories = marginal_calories

    @property
    def resting_heart_rate(self):
        """Gets the resting_heart_rate of this ActivitySummaySummary.  # noqa: E501


        :return: The resting_heart_rate of this ActivitySummaySummary.  # noqa: E501
        :rtype: int
        """
        return self._resting_heart_rate

    @resting_heart_rate.setter
    def resting_heart_rate(self, resting_heart_rate):
        """Sets the resting_heart_rate of this ActivitySummaySummary.


        :param resting_heart_rate: The resting_heart_rate of this ActivitySummaySummary.  # noqa: E501
        :type: int
        """
        if resting_heart_rate is None:
            raise ValueError("Invalid value for `resting_heart_rate`, must not be `None`")  # noqa: E501

        self._resting_heart_rate = resting_heart_rate

    @property
    def sedentary_minutes(self):
        """Gets the sedentary_minutes of this ActivitySummaySummary.  # noqa: E501


        :return: The sedentary_minutes of this ActivitySummaySummary.  # noqa: E501
        :rtype: int
        """
        return self._sedentary_minutes

    @sedentary_minutes.setter
    def sedentary_minutes(self, sedentary_minutes):
        """Sets the sedentary_minutes of this ActivitySummaySummary.


        :param sedentary_minutes: The sedentary_minutes of this ActivitySummaySummary.  # noqa: E501
        :type: int
        """
        if sedentary_minutes is None:
            raise ValueError("Invalid value for `sedentary_minutes`, must not be `None`")  # noqa: E501

        self._sedentary_minutes = sedentary_minutes

    @property
    def steps(self):
        """Gets the steps of this ActivitySummaySummary.  # noqa: E501


        :return: The steps of this ActivitySummaySummary.  # noqa: E501
        :rtype: int
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this ActivitySummaySummary.


        :param steps: The steps of this ActivitySummaySummary.  # noqa: E501
        :type: int
        """
        if steps is None:
            raise ValueError("Invalid value for `steps`, must not be `None`")  # noqa: E501

        self._steps = steps

    @property
    def very_active_minutes(self):
        """Gets the very_active_minutes of this ActivitySummaySummary.  # noqa: E501


        :return: The very_active_minutes of this ActivitySummaySummary.  # noqa: E501
        :rtype: int
        """
        return self._very_active_minutes

    @very_active_minutes.setter
    def very_active_minutes(self, very_active_minutes):
        """Sets the very_active_minutes of this ActivitySummaySummary.


        :param very_active_minutes: The very_active_minutes of this ActivitySummaySummary.  # noqa: E501
        :type: int
        """
        if very_active_minutes is None:
            raise ValueError("Invalid value for `very_active_minutes`, must not be `None`")  # noqa: E501

        self._very_active_minutes = very_active_minutes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivitySummaySummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivitySummaySummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
